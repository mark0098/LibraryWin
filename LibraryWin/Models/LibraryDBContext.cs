// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace LibraryWin.Models;

public partial class LibraryDBContext : DbContext
{
    public LibraryDBContext()
    {
    }

    public LibraryDBContext(DbContextOptions<LibraryDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AllBooksInfo> AllBooksInfos { get; set; }

    public virtual DbSet<Author> Authors { get; set; }

    public virtual DbSet<Book> Books { get; set; }

    public virtual DbSet<BookAuthor> BookAuthors { get; set; }

    public virtual DbSet<BookGenre> BookGenres { get; set; }

    public virtual DbSet<BookIssuance> BookIssuances { get; set; }

    public virtual DbSet<DepartmentOfIssuance> DepartmentOfIssuances { get; set; }

    public virtual DbSet<Genre> Genres { get; set; }

    public virtual DbSet<Hall> Halls { get; set; }

    public virtual DbSet<HallEmployee> HallEmployees { get; set; }

    public virtual DbSet<Librarian> Librarians { get; set; }

    public virtual DbSet<PostInfo> PostInfos { get; set; }

    public virtual DbSet<PublishingHouse> PublishingHouses { get; set; }

    public virtual DbSet<Rack> Racks { get; set; }

    public virtual DbSet<Reader> Readers { get; set; }

    public virtual DbSet<RecycledBook> RecycledBooks { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=Mark\\SQLEXPRESS;Initial Catalog=LibraryDB;Integrated Security=True;Encrypt=True; trusted_connection=true; Trust Server Certificate=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AllBooksInfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AllBooksInfo");

            entity.Property(e => e.Isbn)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ISBN");
            entity.Property(e => e.Автор)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.ГрупповаяПринадлежностьАвтора)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Групповая принадлежность автора");
            entity.Property(e => e.ЖанроваяГруппа)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Жанровая группа");
            entity.Property(e => e.Издательство)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Имя)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.КолВоСтраниц).HasColumnName("Кол-во страниц");
            entity.Property(e => e.Название)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.НомерЗала)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Номер зала");
            entity.Property(e => e.НомерСтеллажа)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Номер стеллажа");
            entity.Property(e => e.Страна)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Author>(entity =>
        {
            entity.ToTable("Author");

            entity.Property(e => e.AuthorId)
                .ValueGeneratedNever()
                .HasColumnName("AuthorID");
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("firstName");
            entity.Property(e => e.Group)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("group");
            entity.Property(e => e.LastName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("lastName");
            entity.Property(e => e.SurName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("surName");
        });

        modelBuilder.Entity<Book>(entity =>
        {
            entity.ToTable("Book");

            entity.Property(e => e.BookId).ValueGeneratedNever();
            entity.Property(e => e.AgeRating)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ageRating");
            entity.Property(e => e.BookIssued)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("bookIssued");
            entity.Property(e => e.CodeBook).HasColumnName("codeBook");
            entity.Property(e => e.Isbn)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ISBN");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.NumberOfPages).HasColumnName("numberOfPages");
            entity.Property(e => e.PublishingHouseId).HasColumnName("PublishingHouseID");
            entity.Property(e => e.RackId).HasColumnName("RackID");

            entity.HasOne(d => d.PublishingHouse).WithMany(p => p.Books)
                .HasForeignKey(d => d.PublishingHouseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Book_PublishingHouse");

            entity.HasOne(d => d.Rack).WithMany(p => p.Books)
                .HasForeignKey(d => d.RackId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Book_Rack");
        });

        modelBuilder.Entity<BookAuthor>(entity =>
        {
            entity.ToTable("Book_Author");

            entity.Property(e => e.BookAuthorId)
                .ValueGeneratedNever()
                .HasColumnName("Book_AuthorID");
            entity.Property(e => e.AuthorId).HasColumnName("AuthorID");
            entity.Property(e => e.BookId).HasColumnName("BookID");

            entity.HasOne(d => d.Author).WithMany(p => p.BookAuthors)
                .HasForeignKey(d => d.AuthorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Book_Author_Author");

            entity.HasOne(d => d.Book).WithMany(p => p.BookAuthors)
                .HasForeignKey(d => d.BookId)
                .HasConstraintName("FK_Book_Author_Book");
        });

        modelBuilder.Entity<BookGenre>(entity =>
        {
            entity.ToTable("Book_Genre");

            entity.Property(e => e.BookGenreId)
                .ValueGeneratedNever()
                .HasColumnName("Book_GenreID");
            entity.Property(e => e.BookId).HasColumnName("bookID");
            entity.Property(e => e.GenreId).HasColumnName("GenreID");

            entity.HasOne(d => d.Book).WithMany(p => p.BookGenres)
                .HasForeignKey(d => d.BookId)
                .HasConstraintName("FK_Book_Genre_Book");

            entity.HasOne(d => d.Genre).WithMany(p => p.BookGenres)
                .HasForeignKey(d => d.GenreId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Book_Genre_Genre");
        });

        modelBuilder.Entity<BookIssuance>(entity =>
        {
            entity.ToTable("BookIssuance", tb => tb.HasTrigger("BookIssuance_BeforeInsertOrUpdate"));

            entity.Property(e => e.BookIssuanceId)
                .ValueGeneratedNever()
                .HasColumnName("BookIssuanceID");
            entity.Property(e => e.BookIssueIsbn)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BookIssueISBN");
            entity.Property(e => e.BookName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DateOfIssue)
                .HasColumnType("date")
                .HasColumnName("dateOfIssue");
            entity.Property(e => e.DateOfPlannedReturn)
                .HasColumnType("date")
                .HasColumnName("dateOfPlannedReturn");
            entity.Property(e => e.DateOfReturn)
                .HasColumnType("date")
                .HasColumnName("dateOfReturn");
            entity.Property(e => e.LibrarianId).HasColumnName("LibrarianID");
            entity.Property(e => e.ReaderId).HasColumnName("ReaderID");

            entity.HasOne(d => d.Librarian).WithMany(p => p.BookIssuances)
                .HasForeignKey(d => d.LibrarianId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BookIssuance_Librarian");

            entity.HasOne(d => d.Reader).WithMany(p => p.BookIssuances)
                .HasForeignKey(d => d.ReaderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BookIssuance_Reader");
        });

        modelBuilder.Entity<DepartmentOfIssuance>(entity =>
        {
            entity.HasKey(e => e.DepartmentOfOssuanceId);

            entity.ToTable("DepartmentOfIssuance");

            entity.Property(e => e.DepartmentOfOssuanceId)
                .ValueGeneratedNever()
                .HasColumnName("DepartmentOfOssuanceID");
            entity.Property(e => e.DepartmentNum)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("departmentNum");
        });

        modelBuilder.Entity<Genre>(entity =>
        {
            entity.ToTable("Genre");

            entity.Property(e => e.GenreId)
                .ValueGeneratedNever()
                .HasColumnName("GenreID");
            entity.Property(e => e.GenreType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("genreType");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Hall>(entity =>
        {
            entity.ToTable("Hall");

            entity.Property(e => e.HallId)
                .ValueGeneratedNever()
                .HasColumnName("HallID");
            entity.Property(e => e.DepartmentOfIssanceId).HasColumnName("DepartmentOfIssanceID");
            entity.Property(e => e.Number)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("type");

            entity.HasOne(d => d.DepartmentOfIssance).WithMany(p => p.Halls)
                .HasForeignKey(d => d.DepartmentOfIssanceId)
                .HasConstraintName("FK_Hall_DepartmentOfIssuance");
        });

        modelBuilder.Entity<HallEmployee>(entity =>
        {
            entity.ToTable("HallEmployee");

            entity.Property(e => e.HallEmployeeId)
                .ValueGeneratedNever()
                .HasColumnName("HallEmployeeID");
            entity.Property(e => e.DateOfBirth)
                .HasColumnType("date")
                .HasColumnName("dateOfBirth");
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("firstName");
            entity.Property(e => e.HallId).HasColumnName("HallID");
            entity.Property(e => e.LastName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("lastName");
            entity.Property(e => e.Post)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("post");
            entity.Property(e => e.Salary)
                .HasColumnType("money")
                .HasColumnName("salary");
            entity.Property(e => e.SurName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("surName");
            entity.Property(e => e.WorkSchelude)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("workSchelude");
            entity.Property(e => e.WorkingHours).HasColumnName("workingHours");

            entity.HasOne(d => d.Hall).WithMany(p => p.HallEmployees)
                .HasForeignKey(d => d.HallId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HallEmployee_Hall");
        });

        modelBuilder.Entity<Librarian>(entity =>
        {
            entity.ToTable("Librarian");

            entity.Property(e => e.LibrarianId)
                .ValueGeneratedNever()
                .HasColumnName("LibrarianID");
            entity.Property(e => e.DateOfBirth)
                .HasColumnType("date")
                .HasColumnName("dateOfBirth");
            entity.Property(e => e.DepartmentOfIssuanceId).HasColumnName("DepartmentOfIssuanceID");
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("firstName");
            entity.Property(e => e.LastName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("lastName");
            entity.Property(e => e.Surname)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("surname");

            entity.HasOne(d => d.DepartmentOfIssuance).WithMany(p => p.Librarians)
                .HasForeignKey(d => d.DepartmentOfIssuanceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Librarian_DepartmentOfIssuance");
        });

        modelBuilder.Entity<PostInfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("PostInfo");

            entity.Property(e => e.Должность)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.МаксимальнаяЗарплата)
                .HasColumnType("money")
                .HasColumnName("Максимальная зарплата");
            entity.Property(e => e.МинимальнаяЗарплата)
                .HasColumnType("money")
                .HasColumnName("Минимальная зарплата");
            entity.Property(e => e.СредняяЗарплата)
                .HasColumnType("money")
                .HasColumnName("Средняя зарплата");
            entity.Property(e => e.СуммаЗарплат)
                .HasColumnType("money")
                .HasColumnName("Сумма зарплат");
        });

        modelBuilder.Entity<PublishingHouse>(entity =>
        {
            entity.ToTable("PublishingHouse");

            entity.Property(e => e.PublishingHouseId)
                .ValueGeneratedNever()
                .HasColumnName("PublishingHouseID");
            entity.Property(e => e.Commercial)
                .IsRequired()
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("commercial");
            entity.Property(e => e.Coverage)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("coverage");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Rack>(entity =>
        {
            entity.ToTable("Rack");

            entity.Property(e => e.RackId)
                .ValueGeneratedNever()
                .HasColumnName("RackID");
            entity.Property(e => e.HallId).HasColumnName("HallID");
            entity.Property(e => e.MaximumNumberOfBooks).HasColumnName("maximumNumberOfBooks");
            entity.Property(e => e.RackNumber)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("rackNumber");

            entity.HasOne(d => d.Hall).WithMany(p => p.Racks)
                .HasForeignKey(d => d.HallId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Rack_Hall");
        });

        modelBuilder.Entity<Reader>(entity =>
        {
            entity.ToTable("Reader");

            entity.Property(e => e.ReaderId)
                .ValueGeneratedNever()
                .HasColumnName("ReaderID");
            entity.Property(e => e.Fine)
                .HasColumnType("money")
                .HasColumnName("fine");
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("firstName");
            entity.Property(e => e.LastName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("lastName");
            entity.Property(e => e.SurName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("surName");
        });

        modelBuilder.Entity<RecycledBook>(entity =>
        {
            entity.ToTable("RecycledBook", tb => tb.HasTrigger("RecycledBook_UpdateInsert"));

            entity.Property(e => e.RecycledBookId)
                .ValueGeneratedNever()
                .HasColumnName("RecycledBookID");
            entity.Property(e => e.AuthorFirstName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("authorFirstName");
            entity.Property(e => e.AuthorLastName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("authorLastName");
            entity.Property(e => e.AuthorSurName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("authorSurName");
            entity.Property(e => e.CodeBook).HasColumnName("codeBook");
            entity.Property(e => e.Isbn)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ISBN");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.NumberOfPages).HasColumnName("numberOfPages");
            entity.Property(e => e.PublishingHouse)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("publishingHouse");
            entity.Property(e => e.RackId).HasColumnName("RackID");

            entity.HasOne(d => d.Rack).WithMany(p => p.RecycledBooks)
                .HasForeignKey(d => d.RackId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RecycledBook_Rack");
        });

        OnModelCreatingGeneratedProcedures(modelBuilder);
        OnModelCreatingGeneratedFunctions(modelBuilder);
        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}