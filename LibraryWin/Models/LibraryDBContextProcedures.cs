// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using LibraryWin.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace LibraryWin.Models
{
    public partial class LibraryDBContext
    {
        private ILibraryDBContextProcedures _procedures;

        public virtual ILibraryDBContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new LibraryDBContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public ILibraryDBContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<getBookInfoResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<getBookPositionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEmpInTheHallResult>().HasNoKey().ToView(null);
        }
    }

    public partial class LibraryDBContextProcedures : ILibraryDBContextProcedures
    {
        private readonly LibraryDBContext _context;

        public LibraryDBContextProcedures(LibraryDBContext context)
        {
            _context = context;
        }

        public virtual async Task<List<getBookInfoResult>> getBookInfoAsync(string nameBook, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "nameBook",
                    Size = 50,
                    Value = nameBook ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<getBookInfoResult>("EXEC @returnValue = [dbo].[getBookInfo] @nameBook = @nameBook", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<getBookPositionResult>> getBookPositionAsync(string nameBook, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "nameBook",
                    Size = 50,
                    Value = nameBook ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<getBookPositionResult>("EXEC @returnValue = [dbo].[getBookPosition] @nameBook = @nameBook", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmpInTheHallResult>> GetEmpInTheHallAsync(int? EmpID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "EmpID",
                    Value = EmpID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmpInTheHallResult>("EXEC @returnValue = [dbo].[GetEmpInTheHall] @EmpID = @EmpID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
